---
title: "Estimating Covid-19 Dynamics and Clinical Detection Rate using the SEIR N-Mixture Model"
author: "Ben Brintz"
institute: "Division of Epidemiology"
format: 
  revealjs:
    auto-animate-easing: ease-in-out
    auto-animate-unmatched: false
    auto-animate-duration: 2
    revealjs-plugins: 
    theme: white
    incremental: true
    scrollable: true
    slideNumber: true  # Slide numbers (optional)
    transition: fade   # Smooth slide transitions
    title-slide-background: "white" # Ensure title slide background matches your style
    css: custom.css    # Link to your custom CSS file

---

## 

::: {.callout-caution title="Warning" .fragment index="1"}
This presentation will not include equations 
:::

::: {.callout-caution title="Warning" .fragment index="2"}
You will not have to learn notation 
:::

::: {.fragment index="3" .fade-up}

Unless you really want to!
:::

## The Covid-19 pandemic highlighted the challenge of imperfect detection in disease surveillance {}

- Case reports undercount true infections due to asymptomatic cases and lack of access to testing
- Only the sickest got diagnosed with Covid early in the pandemic 
- "We must rely on data
from people who are sick enough to get themselves tested, which is a bit like trying to understand exercise
trends among average Americans by surveying the participants of a marathon"

## Various approaches have been developed to estimate clinical detection rates {}

- **Back-calculation methods** estimate the number of infections from hospitalizations and deaths
- **Seroprevalence studies** estimate the proportion of the population that has been infected by testing for antibodies
- **SEIR models** estimate the number of infections from observed cases and the distribution of the incubation period

## Covid-19's incubation period requires an extension to the SIR compartment model {}

- **SIR model** assumes that individuals
transition directly from susceptible to infectious
- **SEIR model** adds an exposed compartment to account for the incubation period
- **SEIR models** don't directly account for imperfect detection

## N-mixture models account for imperfect detection and have been applied to disease

- **N-mixture models** are traditionally used in ecology to estimate the abundance of a species from counts under the imperfect detection assumption
    - American Robin
    - Oregon Slender Salamander 
- Initial extensions of the **N-mixture model** allowed for survival and recruitment processes much like you would see in a compartment model

## SEIR N-mixture model extends the N-mixture model to account for the incubation period and imperfect detection and population size 
- Individuals transition from susceptible to exposed to infectious
- Observed counts are a function of the number of infectious individuals and the clinical detection rate
- Our formulation was inspired by N-
mixture models, but we put imperfect detection on incidence cases instead
of prevalent cases, similar to updatea SEIR latent space model

## Our study has a number of novelties in the imperfect detection space 
- Model estimation allows for different start times of infections across health-districts
-   <span class="blur-text">Estimating an evolving transmission rate using a hierarchical AR(1) process</span>
-   <span class="blur-text">Estimating an evolving recovery rate and incubation using beta-binomial transitions </span>
-   <span class="blur-text">A novel computational solution to estimating dynamics in a discrete transmission model using a continuous approximation in STAN</span>

## Model estimation allows for different start times of infections across health-districts

```{r,include=T,echo=F,cache=TRUE}
library(tidyverse)
TT=30
N_C=11
dat=readRDS('raw_dat.rds')
first=readRDS('first.rds')
dat %>% as_tibble %>% gather(County,Cases) %>% mutate(date=rep(1:(TT-1),N_C),first=rep(first,each=TT-1)) %>% 
  ggplot(aes(x=date,y=Cases)) + geom_line() + geom_vline(aes(xintercept=first),color="red") + facet_wrap(~County,scales="free_y") + theme_bw() + ylab("New Cases") + xlab("Date")

```

## Our study has a number of novelties in the imperfect detection space 
- Model estimation allows for different start times of infections across health-districts
-   Estimating an evolving transmission rate using a hierarchical AR(1) process
-   <span class="blur-text">Estimating an evolving recovery rate and incubation using beta-binomial transitions </span>
-   <span class="blur-text">A novel computational solution to estimating dynamics in a discrete transmission model using a continuous approximation in STAN</span>


## Estimating an evolving transmission rate using a hierarchical AR(1) process

```{r,include=T,echo=F,cache=TRUE}
library(tidyverse)
library(gganimate)

log_betas_time=readRDS("betas_time.rds")[[1]]
betas_time=readRDS("betas_time.rds")[[2]]
p <- ggplot() +
  geom_line(data = log_betas_time, aes(x = index, y = exp(Val)), size = 1) +
  geom_ribbon(data = log_betas_time, aes(x = index, ymin = exp(Low), ymax = exp(High)),
              alpha = 0.25, fill = "blue") +
  # Use the same transformation for y if desired (here I use exp(Val) so they align with the line)
  geom_point(data = betas_time %>% filter(time==1), aes(x = index, y = Val), size = 2) +
  labs(x = "Week", y = "Beta (transmission)") +
  theme_bw() +
  ylim(0, 5) 

#animate(p, nframes = 100, fps = 10, renderer = gifski_renderer("density_animation.gif"))

p
```

## Estimating an evolving transmission rate using a hierarchical AR(1) process

```{r,include=T,echo=F,cache=TRUE}
library(tidyverse)
library(gganimate)

log_betas_time=readRDS("betas_time.rds")[[1]]
betas_time=readRDS("betas_time.rds")[[2]]
p <- ggplot() +
  geom_line(data = log_betas_time, aes(x = index, y = exp(Val)), size = 1) +
  geom_ribbon(data = log_betas_time, aes(x = index, ymin = exp(Low), ymax = exp(High)),
              alpha = 0.25, fill = "blue") +
  # Use the same transformation for y if desired (here I use exp(Val) so they align with the line)
  geom_point(data = betas_time, aes(x = index, y = Val), size = 2) +
  labs(x = "Week", y = "Beta (transmission)") +
  theme_bw() +
  ylim(0, 5) +
  transition_time(time)

anim=animate(p,nframes = 100, fps = 20)
#animate(p, nframes = 100, fps = 10, renderer = gifski_renderer("density_animation.gif"))

anim
```

## Our study has a number of novelties in the imperfect detection space 
- Model estimation allows for different start times of infections across health-districts
- Estimating an evolving transmission rate using a hierarchical AR(1) process
- Estimating an evolving recovery rate and incubation using beta-binomial transitions 
-   <span class="blur-text">A novel computational solution to estimating dynamics in a discrete transmission model using a continuous approximation in STAN</span>


## Estimating an evolving recovery rate and incubation using beta-binomial transitions 
```{r,include=T,echo=F,cache=TRUE}
library(tidyverse)
library(gganimate)

df <- readRDS("betabin_sim.rds")
colnames(df)[2] = "Binomial Transition"
colnames(df)[3] = "Beta-Binomial Transition"
p <- df %>% 
      mutate(Week = Time) %>% select(-Time) %>%
      gather(Approach, Infections,-Week) %>%
      ggplot(aes(x=Week,y=Infections,group=Approach,color=Approach)) +
        geom_point() + geom_line() +
        labs(x = "Week", y = "Infections") +
        theme_bw() + scale_color_viridis_d(begin=.25,end=.75) +
        theme(legend.position = "bottom") +
        transition_reveal(Week)

anim <- animate(p, nframes = 100, fps = 5)

anim
```

## Model Formulation {auto-animate="true"}

$$
\begin{aligned}
I_{if_1} &= c,\\[6pt]
EI_{if_i} &= I_{if_i},\\[6pt]
S_{if_i} &= N_i - EI_{if_i}.
\end{aligned}
$$




## Model Formulation {auto-animate="true"}


**For \(t > f_{i}\):**

$$
\begin{aligned}
SE_{it} &\sim \text{Binomial}\!\Bigl(S_{it-1},\,1 - \exp\!\Bigl(-\tfrac{\beta_{it}I_{it-1}}{N}\Bigr)\Bigr),\\[6pt]
EI_{it} &\sim \text{BetaBinomial}\!\Bigl(E_{it-1},\,1 - \exp(-\eta_i),\,\rho_{EI}\Bigr),\\[6pt]
IR_{it} &\sim \text{BetaBinomial}\!\Bigl(I_{it-1},\,1 - \exp(-\gamma_i),\,\rho_{IR}\Bigr),\\[6pt]
\end{aligned}
$$

$$
\begin{aligned}
I_{if_1} &= c,\\[6pt]
EI_{if_i} &= I_{if_i},\\[6pt]
S_{if_i} &= N_i - EI_{if_i}.
\end{aligned}
$$

## Model Formulation {auto-animate="true"}
$$
\begin{aligned}
S_{it} &= S_{it-1} - SE_{it},\\[6pt]
E_{it} &= 
  \begin{cases}
    SE_{it}, & \text{if } t = f_i + 1,\\[6pt]
    E_{it-1} + SE_{it} - EI_{it}, & \text{if } t > f_i + 1,
  \end{cases}\\[6pt]
I_{it} &= I_{it-1} + EI_{it} - IR_{it},\\[6pt]
ii_{it} &\sim \text{Binomial}\!\Bigl(EI_{it},\,p\Bigr)
\end{aligned}
$$

$$
\begin{aligned}
SE_{it} &\sim \text{Binomial}\!\Bigl(S_{it-1},\,1 - \exp\!\Bigl(-\tfrac{\beta_{it}I_{it-1}}{N}\Bigr)\Bigr),\\[6pt]
EI_{it} &\sim \text{BetaBinomial}\!\Bigl(E_{it-1},\,1 - \exp(-\eta_i),\,\rho_{EI}\Bigr),\\[6pt]
IR_{it} &\sim \text{BetaBinomial}\!\Bigl(I_{it-1},\,1 - \exp(-\gamma_i),\,\rho_{IR}\Bigr),\\[6pt]
\end{aligned}
$$

$$
\begin{aligned}
I_{if_1} &= c,\\[6pt]
EI_{if_i} &= I_{if_i},\\[6pt]
S_{if_i} &= N_i - EI_{if_i}.
\end{aligned}
$$

## My Slide Title {.no-incremental}

::: {.fragment data-fragment-type="replace" data-fragment-index="1"}
Appears first
:::

::: {.fragment data-fragment-type="replace" data-fragment-index="2"}
Appears second
:::

::: {.fragment data-fragment-type="replace" data-fragment-index="3"}
Appears last
:::

## Test
```{r,include=T,echo=F}
# Install packages if you haven't already
# install.packages("deSolve")
# install.packages("tidyverse")
# install.packages("gganimate")  # for animation (optional)

library(deSolve)
library(ggplot2)
library(tidyr)
# Uncomment the next line if you want to create an animated plot
# library(gganimate)

# Define the SEIR model function
seir_model <- function(t, state, parameters) {
  with(as.list(c(state, parameters)), {
    # SEIR differential equations
    dS <- -beta * S * I / N
    dE <- beta * S * I / N - sigma * E
    dI <- sigma * E - gamma * I
    dR <- gamma * I
    list(c(dS, dE, dI, dR))
  })
}

# Total population and initial conditions
N <- 1e3          # total population
init_state <- c(S = N - 1, E = 0, I = 1, R = 0)

# Model parameters
parameters <- c(
  beta = 1,      # transmission rate
  sigma = 1/5.2,   # rate of progression from exposed to infectious (incubation period ~5.2 days)
  gamma = 1/2.9,   # recovery rate (infectious period ~2.9 days)
  N = N
)

# Time vector (days)
times <- seq(0, 160, by = 1)

# Solve the differential equations
seir_out <- ode(y = init_state, times = times, func = seir_model, parms = parameters)
seir_df <- as.data.frame(seir_out)

# Convert data to long format for ggplot2
seir_long <- pivot_longer(seir_df, cols = c("S", "E", "I", "R"), 
                          names_to = "Compartment", values_to = "Count")

# Create a cool static plot using ggplot2
p <- ggplot(seir_long, aes(x = time, y = Count, color = Compartment)) +
  geom_line(size = 1.2) +
  labs(
    title = "SEIR Model Simulation",
    subtitle = "Dynamics of Susceptible, Exposed, Infectious, and Recovered populations",
    x = "Time (days)",
    y = "Number of Individuals",
    color = "Compartment"
  ) +
  theme_minimal(base_size = 14) +
  theme(
    plot.title = element_text(size = 20, face = "bold", hjust = 0.5),
    plot.subtitle = element_text(size = 16, hjust = 0.5),
    axis.title = element_text(face = "bold")
  ) +
  scale_color_manual(values = c("S" = "#2780e3", "E" = "#f39c12", "I" = "#e74c3c", "R" = "#27ae60"))

# Print the static plot
print(p)

# --- Optional: Animated Plot using gganimate ---
# Uncomment the following block if you want to create an animated plot.
#
# anim <- ggplot(seir_long, aes(x = time, y = Count, color = Compartment)) +
#   geom_line(size = 1.2) +
#   labs(
#     title = 'SEIR Model Simulation: Day {frame_time}',
#     x = 'Time (days)',
#     y = 'Number of Individuals'
#   ) +
#   transition_reveal(time) +
#   theme_minimal(base_size = 14) +
#   theme(
#     plot.title = element_text(size = 20, face = "bold", hjust = 0.5),
#     axis.title = element_text(face = "bold")
#   ) +
#   scale_color_manual(values = c("S" = "#2780e3", "E" = "#f39c12", "I" = "#e74c3c", "R" = "#27ae60"))
#
# # To view the animation in RStudio
# animate(anim, nframes = 160, fps = 10)
#
# # To save the animation as a GIF file
# anim_save("SEIR_model_animation.gif", animation = anim)
```