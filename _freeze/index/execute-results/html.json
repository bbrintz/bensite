{
  "hash": "c8a909912b1520ea5650c0ae49f5ff77",
  "result": {
    "markdown": "---\n---\n\n\n## About Me\n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n<title>Interactive Sierpinski Triangle</title>\n<script src=\"https://unpkg.com/svg-pan-zoom@3/dist/svg-pan-zoom.min.js\"></script>\n<script src=\"https://hammerjs.github.io/dist/hammer.min.js\"></script>  <!-- Include Hammer.js -->\n</head>\n<body>\n<svg id=\"sierpinski\" width=\"600\" height=\"600\" style=\"border:1px solid black;\"></svg>\n\n<script>\n  var counter = 1;\n\n  function getArea(x1, y1, x2, y2, x3, y3) {\n    return Math.abs((x1*(y2 - y3) + x2*(y3 - y1) + x3*(y1 - y2)) / 2);\n  }\n\n  function drawTriangle(svg, x1, y1, x2, y2, x3, y3) {\n    var triangle = document.createElementNS(\"http://www.w3.org/2000/svg\", 'polygon');\n    triangle.setAttribute(\"points\", `${x1},${y1} ${x2},${y2} ${x3},${y3}`);\n    triangle.setAttribute(\"stroke\", \"black\");\n    triangle.setAttribute(\"fill\", \"none\");\n    svg.appendChild(triangle);\n\n    // Compute the centroid of the triangle to position the text\n    var centroidX = (x1 + x2 + x3) / 3;\n    var centroidY = (y1 + y2 + y3) / 3;\n\n    // Compute the length of one side of the triangle to determine the font size\n    var sideLength = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n    var fontSize = sideLength * 0.11;  // Adjust multiplier to scale font size\n\n    // Create a text element to display the triangle number\n    var text = document.createElementNS(\"http://www.w3.org/2000/svg\", 'text');\n    text.setAttribute(\"x\", centroidX);\n    text.setAttribute(\"y\", centroidY);\n    text.setAttribute(\"font-size\", fontSize);\n    text.setAttribute(\"text-anchor\", \"middle\");\n    text.setAttribute(\"dominant-baseline\", \"middle\");\n    text.textContent = counter++;  // Increment the counter for the next triangle\n    svg.appendChild(text);\n}\n\n\n  var svg = document.getElementById('sierpinski');\n  var queue = [{ x1: 50, y1: 550, x2: 550, y2: 550, x3: 300, y3: 50, depth: 5 }];\n\n  while(queue.length > 0) {\n    var { x1, y1, x2, y2, x3, y3, depth } = queue.shift();\n    drawTriangle(svg, x1, y1, x2, y2, x3, y3);\n\n    if(depth > 0) {\n      var xm1 = (x1 + x2) / 2;\n      var ym1 = (y1 + y2) / 2;\n      var xm2 = (x2 + x3) / 2;\n      var ym2 = (y2 + y3) / 2;\n      var xm3 = (x1 + x3) / 2;\n      var ym3 = (y1 + y3) / 2;\n\n      queue.push({ x1, y1, x2: xm1, y2: ym1, x3: xm3, y3: ym3, depth: depth - 1 });\n      queue.push({ x1: xm1, y1: ym1, x2, y2, x3: xm2, y3: ym2, depth: depth - 1 });\n      queue.push({ x1: xm3, y1: ym3, x2: xm2, y2: ym2, x3, y3, depth: depth - 1 });\n    }\n  }\n\n  // Enable zoom and pan with svg-pan-zoom\n  svgPanZoom('#sierpinski', {\n    zoomEnabled: true,\n    controlIconsEnabled: true,\n    fit: true,\n    center: true,\n    mouseWheelZoomEnabled: true,  // Enable mouse wheel zoom for desktop\n    customEventsHandler: {\n      haltEventListeners: ['touchstart', 'touchend', 'touchmove', 'touchleave', 'touchcancel'],\n      init: function(options) {\n        var instance = options.instance,\n            initialScale = 1,\n            pannedX = 0,\n            pannedY = 0;\n\n        // Init Hammer\n        // Listen only for pointer and touch events\n        this.hammer = Hammer(options.svgElement, {\n          inputClass: Hammer.SUPPORT_POINTER_EVENTS ? Hammer.PointerEventInput : Hammer.TouchInput\n        });\n\n        // Enable pinch\n        this.hammer.get('pinch').set({enable: true});\n\n        // Handle double tap\n        this.hammer.on('doubletap', function(ev){\n          instance.zoomIn();\n        });\n\n        // Handle pan\n        this.hammer.on('panstart panmove', function(ev){\n          // On pan start reset panned variables\n          if (ev.type === 'panstart') {\n            pannedX = 0;\n            pannedY = 0;\n          }\n\n          // Pan only the difference\n          instance.panBy({x: ev.deltaX - pannedX, y: ev.deltaY - pannedY});\n          pannedX = ev.deltaX;\n          pannedY = ev.deltaY;\n        });\n\n        // Handle pinch\n        this.hammer.on('pinchstart pinchmove', function(ev){\n          // On pinch start remember initial zoom\n          if (ev.type === 'pinchstart') {\n            initialScale = instance.getZoom();\n            instance.zoom(initialScale * ev.scale);\n          }\n\n          instance.zoom(initialScale * ev.scale);\n        });\n\n        // Prevent moving the page on some devices when panning over SVG\n        options.svgElement.addEventListener('touchmove', function(e){ e.preventDefault(); });\n      },\n      destroy: function(){\n        this.hammer.destroy();\n      }\n    }\n  });\n</script>\n\n</body>\n</html>\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}